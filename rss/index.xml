<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Corrientes]]></title><description><![CDATA[101010]]></description><link>https://ricardozanini.github.io</link><generator>RSS for Node</generator><lastBuildDate>Fri, 10 Mar 2017 17:11:14 GMT</lastBuildDate><atom:link href="https://ricardozanini.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Bad Aliens GG - Uma primeira iteração]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Um dos meus hobbies é escrever software novo para hardware antigo. É quase uma perguição doentia conseguir criar um game com poucos bytes para um console que me acompanha desde a infância. Procuro no meu (pouco) tempo livre estudar a arquitetura dos consoles antigos para poder criar algo convincente e que ao menos me <strong>entretenha</strong>.</p>
</div>
<div class="paragraph">
<p>Após algumas idas e vindas, comecei o desenvolvimento do game <strong>Bad Aliens GG</strong> que é um <em>port</em> para o <a href="https://en.wikipedia.org/wiki/Game_Gear">Game Gear</a> de um game desenvolvido com um amigo para um projeto didático feito com HTML5 e JavaScript.</p>
</div>
<div class="paragraph">
<p>A idéia é utilizar os conceitos de <a href="https://en.wikipedia.org/wiki/Space_Invaders">Space Invaders</a> e <a href="https://en.wikipedia.org/wiki/Galaga">Galaga</a> para criar um <strong>shoot-'em-up</strong> arcade com um clima Lo-Fi. Não tenho tato artístico e, por isso, os recursos gráficos ficaram limitados:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://ricardozanini.github.io/images/bad-aliens-gg-001.png" alt="bad aliens gg 001.png">
</div>
</div>
<div class="paragraph">
<p>Ainda em fase de prova de conceito e validação, utilizei o compilador <a href="http://sdcc.sourceforge.net/">SDCC</a> para gerar o código de máquina para o processador do Game Gear (z80). Além do SDCC é preciso do recurso de bibliotecas específicas do console para realizar tarefas comuns como o <a href="https://hardforum.com/threads/how-vsync-works-and-why-people-loathe-it.928593/">VSync</a>, leitura da entrada de joysticks, carregamento de recursos gráficos, controle de efeitos de som, entre outros.</p>
</div>
<div class="paragraph">
<p>A biblioteca que utilizei foi a SMSLib, concebida por <a href="https://github.com/sverx/">este usuário do GitHub</a>. Além da SMSLib ele também montou um <a href="https://github.com/sverx/devkitSMS">SDK</a> para facilitar o trabalho de desenvolvimento e compilação em ROM final para ser executada no emulador ou em um <em>flashcart</em>. Todo o <em>setup</em> para montar o ambiente está disponibilizado na <a href="https://github.com/sverx/devkitSMS">página inicial</a> do repositório do SDK.</p>
</div>
<div class="paragraph">
<p>No MacOS tive que fazer alguns ajustes no SDK para utilizar as ferramentas de compilação e descompressão das imagens. A primeira coisa foi compilar para o meu ambiente, já que no SDK só estão compilados as versões para Windows. No Mac, <a href="http://stackoverflow.com/questions/9353444/how-to-use-install-gcc-on-mac-os-x-10-8-xcode-4-4">basta instalar o XCode com o GCC</a> e executar os comandos abaixo nos respectivos diretórios:</p>
</div>
<div class="paragraph">
<p><code>gcc src/folder2c.c -o folder2c</code><br>
<code>gcc src/ihx2sms.c -o ihx2sms</code></p>
</div>
<div class="paragraph">
<p>Para poder gerar os <em>assests</em> gráficos foi preciso utilizar uma ferramenta disponível apenas para Windows criada por um <a href="http://www.smspower.org/maxim/">usuário do SMSPower</a>, a <a href="http://www.smspower.org/maxim/Software/BMP2Tile">BMP2Tile</a>. No Mac, utilizei o <a href="https://www.winehq.org">Wine 2.0</a> para executar essa ferramenta e gerar os <em>assets</em> no formato utilizado pela SMSLib a partir dos meus tiles.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://ricardozanini.github.io/images/numbers-tilemap-2x.png" alt="numbers tilemap 2x.png">
</div>
</div>
<div class="paragraph">
<p>Para gerar os gráficos do game, desenhei cada tile em 8x8 pixels no <a href="https://pixenapp.com">Pixen</a> e montei as cenas do game utilizando o <a href="http://www.mapeditor.org">Tiled</a>. Com os <em>sprites</em> e tiles formados, gerei as imagens em PNG indexadas em 8 bit utilizando o <a href="http://www.pixelmator.com/mac/">Pixelmator</a>. Essas imagens foram compiladas pelo BMP2Tile e utilizadas mais tarde no game.</p>
</div>
<div class="paragraph">
<p>A partir dessa primeira iteração com as ferramentas e o ambiente configurado, foi possível iniciar o desenvolvimento, algo que pretendo abordar nos próximos posts. Há muito assunto ainda à desenvolver: como desenhar os tiles e <em>sprites</em>, troca de cena, leitura de entrada do <em>joystick</em>, colisão e etc.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_para_saber_mais">Para saber mais:</h3>
<div class="paragraph">
<p><a href="https://github.com/sverx/devkitSMS">SDK Master System/GG: devkitSMS</a><br>
<a href="http://sdcc.sourceforge.net/doc/sdccman.pdf">Compilador C para Z80: SDCC</a><br>
<a href="http://www.smspower.org/forums/15888-DevkitSMSTutorial">devkitSMS Tutorial</a></p>
</div>
</div>]]></description><link>https://ricardozanini.github.io/2017/03/09/Bad-Aliens-GG-Uma-primeira-iteracao.html</link><guid isPermaLink="true">https://ricardozanini.github.io/2017/03/09/Bad-Aliens-GG-Uma-primeira-iteracao.html</guid><category><![CDATA[gamedev]]></category><category><![CDATA[ GG]]></category><category><![CDATA[ badaliens]]></category><dc:creator><![CDATA[Ricardo Zanini]]></dc:creator><pubDate>Thu, 09 Mar 2017 00:00:00 GMT</pubDate></item></channel></rss>